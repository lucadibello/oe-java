cmake_minimum_required(VERSION 3.11)
project(oe_host LANGUAGES C CXX)

find_package(OpenEnclave CONFIG REQUIRED)

# Consume all untrusted stubs generated by all enclaves
get_property(ALL_U_STUBS     GLOBAL PROPERTY OE_ALL_UNTRUSTED_STUBS)
get_property(ALL_U_INC_DIRS  GLOBAL PROPERTY OE_ALL_UNTRUSTED_INC_DIRS)

# if BUILD_JNI_HOST is ON, build a shared library for JNI
if(BUILD_JNI_HOST)
  add_library(oe_jni SHARED
    ${ALL_U_STUBS}
    ${CMAKE_SOURCE_DIR}/host/jni_bridge.cpp
    ${CMAKE_SOURCE_DIR}/host/ocalls_host.cpp
  )
  target_link_libraries(oe_jni PRIVATE openenclave::oehost)
  target_compile_features(oe_jni PRIVATE c_std_11 cxx_std_17)
  target_include_directories(oe_jni PRIVATE ${ALL_U_INC_DIRS})

  # JNI headers (requires JAVA_HOME)
  if(DEFINED ENV{JAVA_HOME})
    target_include_directories(oe_jni PRIVATE
      "$ENV{JAVA_HOME}/include"
      "$ENV{JAVA_HOME}/include/linux"
      "$ENV{JAVA_HOME}/include/darwin"
      "$ENV{JAVA_HOME}/include/win32")
  endif()

  set_target_properties(oe_jni PROPERTIES OUTPUT_NAME "oe_jni")
endif()

# if BUILD_HOST_EXE is ON, build a small CLI host executable
if(BUILD_HOST_EXE)
  add_executable(oe_cli
    ${ALL_U_STUBS}
    ${CMAKE_SOURCE_DIR}/host/host.cpp  # optional CLI driver
  )
  target_link_libraries(oe_cli PRIVATE openenclave::oehost)
  target_include_directories(oe_cli PRIVATE ${ALL_U_INC_DIRS})
  target_compile_features(oe_cli PRIVATE c_std_11 cxx_std_17)
endif()
